{"version":3,"file":"chess-ts.js","sources":["../../../projects/chess-ts/src/lib/chess-enums.ts","../../../projects/chess-ts/src/lib/chess.ts","../../../projects/chess-ts/src/public_api.ts","../../../projects/chess-ts/src/chess-ts.ts"],"sourcesContent":["\n/* todo:\n    make async and sync alternatives to the calling.\n    bring enums into the chess.ts file.\n    fix public/private variables\n    make sure everything has an explicit type\n    create separate classes game, fen, piece\n    fix the todos\n    add documentation and generate API doc\n*/\n\nexport enum Colour {\n    WHITE = 'w',\n    BLACK = 'b'\n}\n\nexport enum PieceType {\n    PAWN = 'p',\n    KNIGHT = 'n',\n    BISHOP = 'b',\n    ROOK = 'r',\n    QUEEN = 'q',\n    KING = 'k'\n}\n\nexport class Move {\n    constructor(public from: string, public to: string,\n        public promotion?: string) {}\n}","import { Colour, PieceType, Move } from './chess-enums';\nimport { EventEmitter } from '@angular/core';\n\nexport class Chess {\n\n    public EMPTY = -1;\n    public onChange: EventEmitter<void> = new EventEmitter<void>();\n\n\n    SYMBOLS = 'pnbrqkPNBRQK';\n\n    DEFAULT_POSITION = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\n\n    POSSIBLE_RESULTS = ['1-0', '0-1', '1/2-1/2', '*'];\n\n    PAWN_OFFSETS = {\n        b: [16, 32, 17, 15],\n        w: [-16, -32, -17, -15]\n    };\n\n    PIECE_OFFSETS = {\n        n: [-18, -33, -31, -14, 18, 33, 31, 14],\n        b: [-17, -15, 17, 15],\n        r: [-16, 1, 16, -1],\n        q: [-17, -16, -15, 1, 17, 16, 15, -1],\n        k: [-17, -16, -15, 1, 17, 16, 15, -1]\n    };\n\n    ATTACKS = [\n        20, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 20, 0,\n        0, 20, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 20, 0, 0,\n        0, 0, 20, 0, 0, 0, 0, 24, 0, 0, 0, 0, 20, 0, 0, 0,\n        0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 0,\n        0, 0, 0, 0, 20, 0, 0, 24, 0, 0, 20, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 20, 2, 24, 2, 20, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 2, 53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n        24, 24, 24, 24, 24, 24, 56, 0, 56, 24, 24, 24, 24, 24, 24, 0,\n        0, 0, 0, 0, 0, 2, 53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 20, 2, 24, 2, 20, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 20, 0, 0, 24, 0, 0, 20, 0, 0, 0, 0, 0,\n        0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 0,\n        0, 0, 20, 0, 0, 0, 0, 24, 0, 0, 0, 0, 20, 0, 0, 0,\n        0, 20, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 20, 0, 0,\n        20, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 20\n    ];\n\n    RAYS = [\n        17, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 15, 0,\n        0, 17, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 15, 0, 0,\n        0, 0, 17, 0, 0, 0, 0, 16, 0, 0, 0, 0, 15, 0, 0, 0,\n        0, 0, 0, 17, 0, 0, 0, 16, 0, 0, 0, 15, 0, 0, 0, 0,\n        0, 0, 0, 0, 17, 0, 0, 16, 0, 0, 15, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 17, 0, 16, 0, 15, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 17, 16, 15, 0, 0, 0, 0, 0, 0, 0,\n        1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, 0,\n        0, 0, 0, 0, 0, 0, -15, -16, -17, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, -15, 0, -16, 0, -17, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, -15, 0, 0, -16, 0, 0, -17, 0, 0, 0, 0, 0,\n        0, 0, 0, -15, 0, 0, 0, -16, 0, 0, 0, -17, 0, 0, 0, 0,\n        0, 0, -15, 0, 0, 0, 0, -16, 0, 0, 0, 0, -17, 0, 0, 0,\n        0, -15, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, -17, 0, 0,\n        -15, 0, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, 0, -17\n    ];\n\n    SHIFTS = { p: 0, n: 1, b: 2, r: 3, q: 4, k: 5 };\n\n    public FLAGS = {\n        NORMAL: 'n',\n        CAPTURE: 'c',\n        BIG_PAWN: 'b',\n        EP_CAPTURE: 'e',\n        PROMOTION: 'p',\n        KSIDE_CASTLE: 'k',\n        QSIDE_CASTLE: 'q'\n    };\n\n    BITS = {\n        NORMAL: 1,\n        CAPTURE: 2,\n        BIG_PAWN: 4,\n        EP_CAPTURE: 8,\n        PROMOTION: 16,\n        KSIDE_CASTLE: 32,\n        QSIDE_CASTLE: 64\n    };\n\n    RANK_1 = 7;\n    RANK_2 = 6;\n    RANK_3 = 5;\n    RANK_4 = 4;\n    RANK_5 = 3;\n    RANK_6 = 2;\n    RANK_7 = 1;\n    RANK_8 = 0;\n\n    SQUARES = {\n        a8: 0, b8: 1, c8: 2, d8: 3, e8: 4, f8: 5, g8: 6, h8: 7,\n        a7: 16, b7: 17, c7: 18, d7: 19, e7: 20, f7: 21, g7: 22, h7: 23,\n        a6: 32, b6: 33, c6: 34, d6: 35, e6: 36, f6: 37, g6: 38, h6: 39,\n        a5: 48, b5: 49, c5: 50, d5: 51, e5: 52, f5: 53, g5: 54, h5: 55,\n        a4: 64, b4: 65, c4: 66, d4: 67, e4: 68, f4: 69, g4: 70, h4: 71,\n        a3: 80, b3: 81, c3: 82, d3: 83, e3: 84, f3: 85, g3: 86, h3: 87,\n        a2: 96, b2: 97, c2: 98, d2: 99, e2: 100, f2: 101, g2: 102, h2: 103,\n        a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\n    };\n\n    ROOKS = {\n        w: [{ square: this.SQUARES.a1, flag: this.BITS.QSIDE_CASTLE },\n        { square: this.SQUARES.h1, flag: this.BITS.KSIDE_CASTLE }],\n        b: [{ square: this.SQUARES.a8, flag: this.BITS.QSIDE_CASTLE },\n        { square: this.SQUARES.h8, flag: this.BITS.KSIDE_CASTLE }]\n    };\n\n    board = new Array<ChessPiece>(128);\n    kings = { w: this.EMPTY, b: this.EMPTY };\n    public turn = Colour.WHITE;\n    castling: Castling = { w: 0, b: 0 };\n    ep_square = this.EMPTY;\n    half_moves = 0;\n    move_number = 1;\n    history = [];\n    header: any = {};\n\n    constructor(fen?: string) {\n        /* if the user passes in a fen string, load it, else default to\n         * starting position\n         */\n        if (typeof fen === 'undefined') {\n            this.load(this.DEFAULT_POSITION);\n        } else {\n            this.load(fen);\n        }\n    }\n\n    public clear() {\n        this.board = new Array(128);\n        this.kings = { w: this.EMPTY, b: this.EMPTY };\n        this.turn = Colour.WHITE;\n        this.castling = { w: 0, b: 0 };\n        this.ep_square = this.EMPTY;\n        this.half_moves = 0;\n        this.move_number = 1;\n        this.history = [];\n        this.header = {};\n        this.update_setup(this.generate_fen());\n    }\n\n    public reset() {\n        this.load(this.DEFAULT_POSITION);\n    }\n\n    public load(fen) {\n        const tokens = fen.split(/\\s+/);\n        const position = tokens[0];\n        let square = 0;\n\n        if (!this.validate_fen(fen).valid) {\n            return false;\n        }\n\n        this.clear();\n\n        for (let i = 0; i < position.length; i++) {\n            const piece = position.charAt(i);\n\n            if (piece === '/') {\n                square += 8;\n            } else if (this.is_digit(piece)) {\n                square += parseInt(piece, 10);\n            } else {\n                const color = (piece < 'a') ? Colour.WHITE : Colour.BLACK;\n                this.put({ type: piece.toLowerCase(), color: color }, this.algebraic(square));\n                square++;\n            }\n        }\n\n        this.turn = tokens[1];\n\n        if (tokens[2].indexOf('K') > -1) {\n            this.castling.w |= this.BITS.KSIDE_CASTLE;\n        }\n        if (tokens[2].indexOf('Q') > -1) {\n            this.castling.w |= this.BITS.QSIDE_CASTLE;\n        }\n        if (tokens[2].indexOf('k') > -1) {\n            this.castling.b |= this.BITS.KSIDE_CASTLE;\n        }\n        if (tokens[2].indexOf('q') > -1) {\n            this.castling.b |= this.BITS.QSIDE_CASTLE;\n        }\n\n        this.ep_square = (tokens[3] === '-') ? this.EMPTY : this.SQUARES[tokens[3]];\n        this.half_moves = parseInt(tokens[4], 10);\n        this.move_number = parseInt(tokens[5], 10);\n\n        this.update_setup(this.generate_fen());\n        this.onChange.emit();\n        return true;\n    }\n\n    /* TODO: this function is pretty much crap - it validates structure but\n     * completely ignores content (e.g. doesn't verify that each side has a king)\n     * ... we should rewrite this, and ditch the silly error_number field while\n     * we're at it\n     */\n    public validate_fen(fen): FenValidationResult {\n        const errors = {\n            0: 'No errors.',\n            1: 'FEN string must contain six space-delimited fields.',\n            2: '6th field (move number) must be a positive integer.',\n            3: '5th field (half move counter) must be a non-negative integer.',\n            4: '4th field (en-passant square) is invalid.',\n            5: '3rd field (castling availability) is invalid.',\n            6: '2nd field (side to move) is invalid.',\n            7: '1st field (piece positions) does not contain 8 \\'/\\'-delimited rows.',\n            8: '1st field (piece positions) is invalid [consecutive numbers].',\n            9: '1st field (piece positions) is invalid [invalid piece].',\n            10: '1st field (piece positions) is invalid [row too large].',\n            11: 'Illegal en-passant square',\n        };\n\n        /* 1st criterion: 6 space-seperated fields? */\n        const tokens = fen.split(/\\s+/);\n        if (tokens.length !== 6) {\n            return { valid: false, error_number: 1, error: errors[1] };\n        }\n\n        /* 2nd criterion: move number field is a integer value > 0? */\n        if (isNaN(tokens[5]) || (parseInt(tokens[5], 10) <= 0)) {\n            return { valid: false, error_number: 2, error: errors[2] };\n        }\n\n        /* 3rd criterion: half move counter is an integer >= 0? */\n        if (isNaN(tokens[4]) || (parseInt(tokens[4], 10) < 0)) {\n            return { valid: false, error_number: 3, error: errors[3] };\n        }\n\n        /* 4th criterion: 4th field is a valid e.p.-string? */\n        if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\n            return { valid: false, error_number: 4, error: errors[4] };\n        }\n\n        /* 5th criterion: 3th field is a valid castle-string? */\n        if (!/^(KQ?k?q?|Qk?q?|kq?|q|-)$/.test(tokens[2])) {\n            return { valid: false, error_number: 5, error: errors[5] };\n        }\n\n        /* 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)? */\n        if (!/^(w|b)$/.test(tokens[1])) {\n            return { valid: false, error_number: 6, error: errors[6] };\n        }\n\n        /* 7th criterion: 1st field contains 8 rows? */\n        const rows = tokens[0].split('/');\n        if (rows.length !== 8) {\n            return { valid: false, error_number: 7, error: errors[7] };\n        }\n\n        /* 8th criterion: every row is valid? */\n        for (let i = 0; i < rows.length; i++) {\n            /* check for right sum of fields AND not two numbers in succession */\n            let sum_fields = 0;\n            let previous_was_number = false;\n\n            for (let k = 0; k < rows[i].length; k++) {\n                if (!isNaN(rows[i][k])) {\n                    if (previous_was_number) {\n                        return { valid: false, error_number: 8, error: errors[8] };\n                    }\n                    sum_fields += parseInt(rows[i][k], 10);\n                    previous_was_number = true;\n                } else {\n                    if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\n                        return { valid: false, error_number: 9, error: errors[9] };\n                    }\n                    sum_fields += 1;\n                    previous_was_number = false;\n                }\n            }\n            if (sum_fields !== 8) {\n                return { valid: false, error_number: 10, error: errors[10] };\n            }\n        }\n\n        if ((tokens[3][1] === '3' && tokens[1] === 'w') ||\n            (tokens[3][1] === '6' && tokens[1] === 'b')) {\n            return { valid: false, error_number: 11, error: errors[11] };\n        }\n\n        /* everything's okay! */\n        return { valid: true, error_number: 0, error: errors[0] };\n    }\n\n    generate_fen() {\n        let empty = 0;\n        let fen = '';\n\n        for (let i = this.SQUARES.a8; i <= this.SQUARES.h1; i++) {\n            if (this.board[i] === undefined) {\n                empty++;\n            } else {\n                if (empty > 0) {\n                    fen += empty;\n                    empty = 0;\n                }\n                const color = this.board[i].color;\n                const piece = this.board[i].type;\n\n                fen += (color === Colour.WHITE) ?\n                    piece.toUpperCase() : piece.toLowerCase();\n            }\n\n            if ((i + 1) & 0x88) {\n                if (empty > 0) {\n                    fen += empty;\n                }\n\n                if (i !== this.SQUARES.h1) {\n                    fen += '/';\n                }\n\n                empty = 0;\n                i += 8;\n            }\n        }\n\n        let cflags = '';\n        if (this.castling[Colour.WHITE] & this.BITS.KSIDE_CASTLE) { cflags += 'K'; }\n        if (this.castling[Colour.WHITE] & this.BITS.QSIDE_CASTLE) { cflags += 'Q'; }\n        if (this.castling[Colour.BLACK] & this.BITS.KSIDE_CASTLE) { cflags += 'k'; }\n        if (this.castling[Colour.BLACK] & this.BITS.QSIDE_CASTLE) { cflags += 'q'; }\n\n        /* do we have an empty castling flag? */\n        cflags = cflags || '-';\n        const epflags = (this.ep_square === this.EMPTY) ? '-' : this.algebraic(this.ep_square);\n\n        return [fen, this.turn, cflags, epflags, this.half_moves, this.move_number].join(' ');\n    }\n\n    set_header(args) {\n        for (let i = 0; i < args.length; i += 2) {\n            if (typeof args[i] === 'string' &&\n                typeof args[i + 1] === 'string') {\n                this.header[args[i]] = args[i + 1];\n            }\n        }\n        return this.header;\n    }\n\n    /* called when the initial board setup is changed with put() or remove().\n     * modifies the SetUp and FEN properties of the header object.  if the FEN is\n     * equal to the default position, the SetUp and FEN are deleted\n     * the setup is only updated if history.length is zero, ie moves haven't been\n     * made.\n     */\n    update_setup(fen) {\n        if (history.length > 0) { return; }\n\n        if (fen !== this.DEFAULT_POSITION) {\n            this.header['SetUp'] = '1';\n            this.header['FEN'] = fen;\n        } else {\n            delete this.header['SetUp'];\n            delete this.header['FEN'];\n        }\n    }\n\n    public get(square) {\n        const piece = this.board[this.SQUARES[square]];\n        return (piece) ? { type: piece.type, color: piece.color } : undefined;\n    }\n\n    public put(piece, square) {\n        /* check for valid piece object */\n        if (!('type' in piece && 'color' in piece)) {\n            return false;\n        }\n\n        /* check for piece */\n        if (this.SYMBOLS.indexOf(piece.type.toLowerCase()) === -1) {\n            return false;\n        }\n\n        /* check for valid square */\n        if (!(square in this.SQUARES)) {\n            return false;\n        }\n\n        const sq = this.SQUARES[square];\n\n        /* don't let the user place more than one king */\n        if (piece.type === PieceType.KING &&\n            !(this.kings[piece.color] === this.EMPTY || this.kings[piece.color] === sq)) {\n            return false;\n        }\n\n        this.board[sq] = { type: piece.type, color: piece.color };\n        if (piece.type === PieceType.KING) {\n            this.kings[piece.color] = sq;\n        }\n\n        this.update_setup(this.generate_fen());\n        return true;\n    }\n\n    public remove(square) {\n        const piece = this.get(square);\n        this.board[this.SQUARES[square]] = undefined;\n        if (piece && piece.type === PieceType.KING) {\n            this.kings[piece.color] = this.EMPTY;\n        }\n\n        this.update_setup(this.generate_fen());\n        return piece;\n    }\n\n    build_move(board, from, to, flags, promotion?) {\n        const move = {\n            color: this.turn,\n            from: from,\n            to: to,\n            flags: flags,\n            piece: board[from].type,\n            // dgm: these needed to exist for typescript\n            promotion: undefined,\n            captured: undefined\n        };\n\n        if (promotion) {\n            move.flags |= this.BITS.PROMOTION;\n            move.promotion = promotion;\n        }\n\n        if (board[to]) {\n            move.captured = board[to].type;\n        } else if (flags & this.BITS.EP_CAPTURE) {\n            move.captured = PieceType.PAWN;\n        }\n        return move;\n    }\n\n    private add_move(board, moves, from, to, flags) {\n        /* if pawn promotion */\n        if (board[from].type === PieceType.PAWN &&\n            (this.rank(to) === this.RANK_8 || this.rank(to) === this.RANK_1)) {\n            const pieces = [PieceType.QUEEN, PieceType.ROOK, PieceType.BISHOP, PieceType.KNIGHT];\n            for (let i = 0, len = pieces.length; i < len; i++) {\n                moves.push(this.build_move(board, from, to, flags, pieces[i]));\n            }\n        } else {\n            moves.push(this.build_move(board, from, to, flags));\n        }\n    }\n\n    generate_moves(options?) {\n\n\n        const moves = [];\n        const us = this.turn;\n        const them = this.swap_color(us);\n        const second_rank = { b: this.RANK_7, w: this.RANK_2 };\n\n        let first_sq = this.SQUARES.a8;\n        let last_sq = this.SQUARES.h1;\n        let single_square = false;\n\n        /* do we want legal moves? */\n        const legal = (typeof options !== 'undefined' && 'legal' in options) ?\n            options.legal : true;\n\n        /* are we generating moves for a single square? */\n        if (typeof options !== 'undefined' && 'square' in options) {\n            if (options.square in this.SQUARES) {\n                first_sq = last_sq = this.SQUARES[options.square];\n                single_square = true;\n            } else {\n                /* invalid square */\n                return [];\n            }\n        }\n\n        for (let i = first_sq; i <= last_sq; i++) {\n            /* did we run off the end of the board */\n            if (i & 0x88) { i += 7; continue; }\n\n            const piece = this.board[i];\n            if (piece === undefined || piece.color !== us) {\n                continue;\n            }\n\n            if (piece.type === PieceType.PAWN) {\n                /* single square, non-capturing */\n                const square1 = i + this.PAWN_OFFSETS[us][0];\n                if (this.board[square1] === undefined) {\n                    this.add_move(this.board, moves, i, square1, this.BITS.NORMAL);\n\n                    /* double square */\n                    const square = i + this.PAWN_OFFSETS[us][1];\n                    if (second_rank[us] === this.rank(i) && this.board[square] === undefined) {\n                        this.add_move(this.board, moves, i, square, this.BITS.BIG_PAWN);\n                    }\n                }\n\n                /* pawn captures */\n                for (let j = 2; j < 4; j++) {\n                    const square = i + this.PAWN_OFFSETS[us][j];\n                    if (square & 0x88) { continue; }\n\n                    if (this.board[square] !== undefined &&\n                        this.board[square].color === them) {\n                        this.add_move(this.board, moves, i, square, this.BITS.CAPTURE);\n                    } else if (square === this.ep_square) {\n                        this.add_move(this.board, moves, i, this.ep_square, this.BITS.EP_CAPTURE);\n                    }\n                }\n            } else {\n                for (let j = 0, len = this.PIECE_OFFSETS[piece.type].length; j < len; j++) {\n                    const offset = this.PIECE_OFFSETS[piece.type][j];\n                    let square = i;\n\n                    while (true) {\n                        square += offset;\n                        if (square & 0x88) { break; }\n\n                        if (this.board[square] === undefined) {\n                            this.add_move(this.board, moves, i, square, this.BITS.NORMAL);\n                        } else {\n                            if (this.board[square].color === us) { break; }\n                            this.add_move(this.board, moves, i, square, this.BITS.CAPTURE);\n                            break;\n                        }\n\n                        /* break, if knight or king */\n                        if (piece.type === 'n' || piece.type === 'k') { break; }\n                    }\n                }\n            }\n        }\n\n        /* check for castling if: a) we're generating all moves, or b) we're doing\n         * single square move generation on the king's square\n         */\n        if ((!single_square) || last_sq === this.kings[us]) {\n            /* king-side castling */\n            if (this.castling[us] & this.BITS.KSIDE_CASTLE) {\n                const castling_from = this.kings[us];\n                const castling_to = castling_from + 2;\n\n                if (this.board[castling_from + 1] === undefined &&\n                    this.board[castling_to] === undefined &&\n                    !this.attacked(them, this.kings[us]) &&\n                    !this.attacked(them, castling_from + 1) &&\n                    !this.attacked(them, castling_to)) {\n                    this.add_move(this.board, moves, this.kings[us], castling_to,\n                        this.BITS.KSIDE_CASTLE);\n                }\n            }\n\n            /* queen-side castling */\n            if (this.castling[us] & this.BITS.QSIDE_CASTLE) {\n                const castling_from = this.kings[us];\n                const castling_to = castling_from - 2;\n\n                if (this.board[castling_from - 1] === undefined &&\n                    this.board[castling_from - 2] === undefined &&\n                    this.board[castling_from - 3] === undefined &&\n                    !this.attacked(them, this.kings[us]) &&\n                    !this.attacked(them, castling_from - 1) &&\n                    !this.attacked(them, castling_to)) {\n                    this.add_move(this.board, moves, this.kings[us], castling_to,\n                        this.BITS.QSIDE_CASTLE);\n                }\n            }\n        }\n\n        /* return all pseudo-legal moves (this includes moves that allow the king\n         * to be captured)\n         */\n        if (!legal) {\n            return moves;\n        }\n\n        /* filter out illegal moves */\n        const legal_moves = [];\n        for (let i = 0, len = moves.length; i < len; i++) {\n            this.make_move(moves[i]);\n            if (!this.king_attacked(us)) {\n                legal_moves.push(moves[i]);\n            }\n            this.undo_move();\n        }\n\n        return legal_moves;\n    }\n\n    /* convert a move from 0x88 coordinates to Standard Algebraic Notation\n     * (SAN)\n     *\n     * @param {boolean} sloppy Use the sloppy SAN generator to work around over\n     * disambiguation bugs in Fritz and Chessbase.  See below:\n     *\n     * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\n     * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\n     * 4. ... Ne7 is technically the valid SAN\n     */\n    move_to_san(move, sloppy?) {\n\n        let output = '';\n\n        if (move.flags & this.BITS.KSIDE_CASTLE) {\n            output = 'O-O';\n        } else if (move.flags & this.BITS.QSIDE_CASTLE) {\n            output = 'O-O-O';\n        } else {\n            const disambiguator = this.get_disambiguator(move, sloppy);\n\n            if (move.piece !== PieceType.PAWN) {\n                output += move.piece.toUpperCase() + disambiguator;\n            }\n\n            if (move.flags & (this.BITS.CAPTURE | this.BITS.EP_CAPTURE)) {\n                if (move.piece === PieceType.PAWN) {\n                    output += this.algebraic(move.from)[0];\n                }\n                output += 'x';\n            }\n\n            output += this.algebraic(move.to);\n\n            if (move.flags & this.BITS.PROMOTION) {\n                output += '=' + move.promotion.toUpperCase();\n            }\n        }\n\n        this.make_move(move);\n        if (this.in_check()) {\n            if (this.in_checkmate()) {\n                output += '#';\n            } else {\n                output += '+';\n            }\n        }\n        this.undo_move();\n\n        return output;\n    }\n\n    // parses all of the decorators out of a SAN string\n    stripped_san(move) {\n        return move.replace(/=/, '').replace(/[+#]?[?!]*$/, '');\n    }\n\n    attacked(color, square) {\n        for (let i = this.SQUARES.a8; i <= this.SQUARES.h1; i++) {\n            /* did we run off the end of the board */\n            if (i & 0x88) { i += 7; continue; }\n\n            /* if empty square or wrong color */\n            if (this.board[i] === undefined || this.board[i].color !== color) { continue; }\n\n            const piece = this.board[i];\n            const difference = i - square;\n            const index = difference + 119;\n\n            if (this.ATTACKS[index] & (1 << this.SHIFTS[piece.type])) {\n                if (piece.type === PieceType.PAWN) {\n                    if (difference > 0) {\n                        if (piece.color === Colour.WHITE) { return true; }\n                    } else {\n                        if (piece.color === Colour.BLACK) { return true; }\n                    }\n                    continue;\n                }\n\n                /* if the piece is a knight or a king */\n                if (piece.type === 'n' || piece.type === 'k') { return true; }\n\n                const offset = this.RAYS[index];\n                let j = i + offset;\n\n                let blocked = false;\n                while (j !== square) {\n                    if (this.board[j] !== undefined) { blocked = true; break; }\n                    j += offset;\n                }\n\n                if (!blocked) { return true; }\n            }\n        }\n\n        return false;\n    }\n\n    king_attacked(color) {\n        return this.attacked(this.swap_color(color), this.kings[color]);\n    }\n\n    public in_check() {\n        return this.king_attacked(this.turn);\n    }\n\n    public in_checkmate() {\n        return this.in_check() && this.generate_moves().length === 0;\n    }\n\n    public in_stalemate() {\n        return !this.in_check() && this.generate_moves().length === 0;\n    }\n\n    public insufficient_material() {\n        const pieces = {};\n        const bishops = [];\n        let num_pieces = 0;\n        let sq_color = 0;\n\n        for (let i = this.SQUARES.a8; i <= this.SQUARES.h1; i++) {\n            sq_color = (sq_color + 1) % 2;\n            if (i & 0x88) { i += 7; continue; }\n\n            const piece = this.board[i];\n            if (piece) {\n                pieces[piece.type] = (piece.type in pieces) ?\n                    pieces[piece.type] + 1 : 1;\n                if (piece.type === PieceType.BISHOP) {\n                    bishops.push(sq_color);\n                }\n                num_pieces++;\n            }\n        }\n\n        /* k vs. k */\n        if (num_pieces === 2) { return true; } else if (num_pieces === 3 && (pieces[PieceType.BISHOP] === 1 ||\n            pieces[PieceType.KNIGHT] === 1)) { return true; } else if (num_pieces === pieces[PieceType.BISHOP] + 2) {\n            let sum = 0;\n            const len = bishops.length;\n            for (let i = 0; i < len; i++) {\n                sum += bishops[i];\n            }\n            if (sum === 0 || sum === len) { return true; }\n        }\n\n        return false;\n    }\n\n    public in_threefold_repetition() {\n        /* TODO: while this function is fine for casual use, a better\n         * implementation would use a Zobrist key (instead of FEN). the\n         * Zobrist key would be maintained in the make_move/undo_move functions,\n         * avoiding the costly that we do below.\n         */\n        const moves = [];\n        const positions = {};\n        let repetition = false;\n\n        while (true) {\n            const move = this.undo_move();\n            if (!move) { break; }\n            moves.push(move);\n        }\n\n        while (true) {\n            /* remove the last two fields in the FEN string, they're not needed\n             * when checking for draw by rep */\n            const fen = this.generate_fen().split(' ').slice(0, 4).join(' ');\n\n            /* has the position occurred three or move times */\n            positions[fen] = (fen in positions) ? positions[fen] + 1 : 1;\n            if (positions[fen] >= 3) {\n                repetition = true;\n            }\n\n            if (!moves.length) {\n                break;\n            }\n            this.make_move(moves.pop());\n        }\n\n        return repetition;\n    }\n\n    push(move) {\n        this.history.push({\n            move: move,\n            kings: { b: this.kings.b, w: this.kings.w },\n            turn: this.turn,\n            castling: { b: this.castling.b, w: this.castling.w },\n            ep_square: this.ep_square,\n            half_moves: this.half_moves,\n            move_number: this.move_number\n        });\n    }\n\n    make_move(move) {\n        const us: Colour = this.turn;\n        const them = this.swap_color(us);\n        this.push(move);\n\n        this.board[move.to] = this.board[move.from];\n        this.board[move.from] = undefined;\n\n        /* if ep capture, remove the captured pawn */\n        if (move.flags & this.BITS.EP_CAPTURE) {\n            if (this.turn === Colour.BLACK) {\n                this.board[move.to - 16] = undefined;\n            } else {\n                this.board[move.to + 16] = undefined;\n            }\n        }\n\n        /* if pawn promotion, replace with new piece */\n        if (move.flags & this.BITS.PROMOTION) {\n            this.board[move.to] = { type: move.promotion, color: us };\n        }\n\n        /* if we moved the king */\n        if (this.board[move.to].type === PieceType.KING) {\n            this.kings[this.board[move.to].color] = move.to;\n\n            /* if we castled, move the rook next to the king */\n            if (move.flags & this.BITS.KSIDE_CASTLE) {\n                const castling_to = move.to - 1;\n                const castling_from = move.to + 1;\n                this.board[castling_to] = this.board[castling_from];\n                this.board[castling_from] = undefined;\n            } else if (move.flags & this.BITS.QSIDE_CASTLE) {\n                const castling_to2 = move.to + 1;\n                const castling_from2 = move.to - 2;\n                this.board[castling_to2] = this.board[castling_from2];\n                this.board[castling_from2] = undefined;\n            }\n\n            /* turn off castling */\n            this.castling[us] = '';\n        }\n\n        /* turn off castling if we move a rook */\n        if (this.castling[us]) {\n            for (let i = 0, len = this.ROOKS[us].length; i < len; i++) {\n                if (move.from === this.ROOKS[us][i].square &&\n                    this.castling[us] & this.ROOKS[us][i].flag) {\n                    this.castling[us] ^= this.ROOKS[us][i].flag;\n                    break;\n                }\n            }\n        }\n\n        /* turn off castling if we capture a rook */\n        if (this.castling[them]) {\n            for (let i = 0, len = this.ROOKS[them].length; i < len; i++) {\n                if (move.to === this.ROOKS[them][i].square &&\n                    this.castling[them] & this.ROOKS[them][i].flag) {\n                    this.castling[them] ^= this.ROOKS[them][i].flag;\n                    break;\n                }\n            }\n        }\n\n        /* if big pawn move, update the en passant square */\n        if (move.flags & this.BITS.BIG_PAWN) {\n            if (this.turn === 'b') {\n                this.ep_square = move.to - 16;\n            } else {\n                this.ep_square = move.to + 16;\n            }\n        } else {\n            this.ep_square = this.EMPTY;\n        }\n\n        /* reset the 50 move counter if a pawn is moved or a piece is captured */\n        if (move.piece === PieceType.PAWN) {\n            this.half_moves = 0;\n        } else if (move.flags & (this.BITS.CAPTURE | this.BITS.EP_CAPTURE)) {\n            this.half_moves = 0;\n        } else {\n            this.half_moves++;\n        }\n\n        if (this.turn === Colour.BLACK) {\n            this.move_number++;\n        }\n        this.turn = this.swap_color(this.turn);\n    }\n\n    undo_move() {\n        const old = this.history.pop();\n        if (old === undefined) { return undefined; }\n\n        const move = old.move;\n        this.kings = old.kings;\n        this.turn = old.turn;\n        this.castling = old.castling;\n        this.ep_square = old.ep_square;\n        this.half_moves = old.half_moves;\n        this.move_number = old.move_number;\n\n        const us = this.turn;\n        const them = this.swap_color(this.turn);\n\n        this.board[move.from] = this.board[move.to];\n        this.board[move.from].type = move.piece;  // to undo any promotions\n        this.board[move.to] = undefined;\n\n        if (move.flags & this.BITS.CAPTURE) {\n            this.board[move.to] = { type: move.captured, color: them };\n        } else if (move.flags & this.BITS.EP_CAPTURE) {\n            let index;\n            if (us === Colour.BLACK) {\n                index = move.to - 16;\n            } else {\n                index = move.to + 16;\n            }\n            this.board[index] = { type: PieceType.PAWN, color: them };\n        }\n\n\n        if (move.flags & (this.BITS.KSIDE_CASTLE | this.BITS.QSIDE_CASTLE)) {\n            let castling_to, castling_from;\n            if (move.flags & this.BITS.KSIDE_CASTLE) {\n                castling_to = move.to + 1;\n                castling_from = move.to - 1;\n            } else if (move.flags & this.BITS.QSIDE_CASTLE) {\n                castling_to = move.to - 2;\n                castling_from = move.to + 1;\n            }\n\n            this.board[castling_to] = this.board[castling_from];\n            this.board[castling_from] = undefined;\n        }\n        return move;\n    }\n\n    /* this function is used to uniquely identify ambiguous moves */\n    get_disambiguator(move, sloppy) {\n        const moves = this.generate_moves({ legal: !sloppy });\n\n        const from = move.from;\n        const to = move.to;\n        const piece = move.piece;\n\n        let ambiguities = 0;\n        let same_rank = 0;\n        let same_file = 0;\n\n        for (let i = 0, len = moves.length; i < len; i++) {\n            const ambig_from = moves[i].from;\n            const ambig_to = moves[i].to;\n            const ambig_piece = moves[i].piece;\n\n            /* if a move of the same piece type ends on the same to square, we'll\n             * need to add a disambiguator to the algebraic notation\n             */\n            if (piece === ambig_piece && from !== ambig_from && to === ambig_to) {\n                ambiguities++;\n\n                if (this.rank(from) === this.rank(ambig_from)) {\n                    same_rank++;\n                }\n\n                if (this.file(from) === this.file(ambig_from)) {\n                    same_file++;\n                }\n            }\n        }\n\n        if (ambiguities > 0) {\n            /* if there exists a similar moving piece on the same rank and file as\n             * the move in question, use the square as the disambiguator\n             */\n            if (same_rank > 0 && same_file > 0) {\n                return this.algebraic(from);\n            } else if (same_file > 0) {\n                return this.algebraic(from).charAt(1);\n            } else {\n                return this.algebraic(from).charAt(0);\n            }\n        }\n\n        return '';\n    }\n\n    public ascii() {\n        let s = '   +------------------------+\\n';\n        for (let i = this.SQUARES.a8; i <= this.SQUARES.h1; i++) {\n            /* display the rank */\n            if (this.file(i) === 0) {\n                s += ' ' + '87654321'[this.rank(i)] + ' |';\n            }\n\n            /* empty piece */\n            if (this.board[i] === undefined) {\n                s += ' . ';\n            } else {\n                const piece = this.board[i].type;\n                const color = this.board[i].color;\n                const symbol = (color === Colour.WHITE) ?\n                    piece.toUpperCase() : piece.toLowerCase();\n                s += ' ' + symbol + ' ';\n            }\n\n            if ((i + 1) & 0x88) {\n                s += '|\\n';\n                i += 8;\n            }\n        }\n        s += '   +------------------------+\\n';\n        s += '     a  b  c  d  e  f  g  h\\n';\n\n        return s;\n    }\n\n    // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\n    move_from_san(move, sloppy) {\n        // strip off any move decorations: e.g Nf3+?!\n        const clean_move = this.stripped_san(move);\n\n        // if we're using the sloppy parser run a regex to grab piece, to, and from\n        // this should parse invalid SAN like: Pe2-e4, Rc1c4, Qf3xf7\n        const matches = clean_move.match(/([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/);\n        let piece;\n        let from;\n        let to;\n        let promotion;\n        if (sloppy) {\n            if (matches) {\n                piece = matches[1];\n                from = matches[2];\n                to = matches[3];\n                promotion = matches[4];\n            }\n        }\n\n        const moves = this.generate_moves();\n        for (let i = 0, len = moves.length; i < len; i++) {\n            // try the strict parser first, then the sloppy parser if requested\n            // by the user\n            if ((clean_move === this.stripped_san(this.move_to_san(moves[i]))) ||\n                (sloppy && clean_move === this.stripped_san(this.move_to_san(moves[i], true)))) {\n                return moves[i];\n            } else {\n                if (matches &&\n                    (!piece || piece.toLowerCase() === moves[i].piece) &&\n                    this.SQUARES[from] === moves[i].from &&\n                    this.SQUARES[to] === moves[i].to &&\n                    (!promotion || promotion.toLowerCase() === moves[i].promotion)) {\n                    return moves[i];\n                }\n            }\n        }\n\n        return undefined;\n    }\n\n\n    /*****************************************************************************\n     * UTILITY FUNCTIONS\n     ****************************************************************************/\n    rank(i) {\n        return i >> 4;\n    }\n\n    file(i) {\n        return i & 15;\n    }\n\n    algebraic(i) {\n        const f = this.file(i), r = this.rank(i);\n        return 'abcdefgh'.substring(f, f + 1) + '87654321'.substring(r, r + 1);\n    }\n\n    swap_color(c) {\n        return c === Colour.WHITE ? Colour.BLACK : Colour.WHITE;\n    }\n\n    is_digit(c) {\n        return '0123456789'.indexOf(c) !== -1;\n    }\n\n    /* pretty = external move object */\n    make_pretty(ugly_move) {\n        const move = this.clone(ugly_move);\n        move.san = this.move_to_san(move, false);\n        move.to = this.algebraic(move.to);\n        move.from = this.algebraic(move.from);\n\n        let flags = '';\n\n        for (const flag in this.BITS) {\n            if (this.BITS[flag] & move.flags) {\n                flags += this.FLAGS[flag];\n            }\n        }\n        move.flags = flags;\n\n        return move;\n    }\n\n    clone(obj) {\n        const dupe: any = (obj instanceof Array) ? [] : {};\n\n        for (const property in obj) {\n            if (typeof property === 'object') {\n                dupe[property] = this.clone(obj[property]);\n            } else {\n                dupe[property] = obj[property];\n            }\n        }\n\n        return dupe;\n    }\n\n    trim(str) {\n        return str.replace(/^\\s+|\\s+$/g, '');\n    }\n\n    /*****************************************************************************\n     * DEBUGGING UTILITIES\n     ****************************************************************************/\n    public perft(depth) {\n        const moves = this.generate_moves({ legal: false });\n        let nodes = 0;\n        const color = this.turn;\n\n        for (let i = 0, len = moves.length; i < len; i++) {\n            this.make_move(moves[i]);\n            if (!this.king_attacked(color)) {\n                if (depth - 1 > 0) {\n                    const child_nodes = this.perft(depth - 1);\n                    nodes += child_nodes;\n                } else {\n                    nodes++;\n                }\n            }\n            this.undo_move();\n        }\n\n        return nodes;\n    }\n\n    public getSquares() {\n        /* from the ECMA-262 spec (section 12.6.4):\n         * \"The mechanics of enumerating the properties ... is\n         * implementation dependent\"\n         * so: for (var sq in SQUARES) { keys.push(sq); } might not be\n         * ordered correctly\n         */\n        const keys = [];\n        for (let i = this.SQUARES.a8; i <= this.SQUARES.h1; i++) {\n            if (i & 0x88) { i += 7; continue; }\n            keys.push(this.algebraic(i));\n        }\n        return keys;\n    }\n\n    public getMoves(options) {\n        /* The internal representation of a chess move is in 0x88 format, and\n                 * not meant to be human-readable.  The code below converts the 0x88\n                 * square coordinates to algebraic coordinates.  It also prunes an\n                 * unnecessary move keys resulting from a verbose call.\n                 */\n\n        const ugly_moves = this.generate_moves(options);\n        const moves = [];\n\n        for (let i = 0, len = ugly_moves.length; i < len; i++) {\n\n            /* does the user want a full move object (most likely not), or just\n             * SAN\n             */\n            if (typeof options !== 'undefined' && 'verbose' in options &&\n                options.verbose) {\n                moves.push(this.make_pretty(ugly_moves[i]));\n            } else {\n                moves.push(this.move_to_san(ugly_moves[i], false));\n            }\n        }\n\n        return moves;\n    }\n\n    public get in_draw() {\n        return this.half_moves >= 100 ||\n            this.in_stalemate() ||\n            this.insufficient_material() ||\n            this.in_threefold_repetition();\n    }\n\n    public get game_over() {\n        return this.half_moves >= 100 ||\n            this.in_checkmate() ||\n            this.in_stalemate() ||\n            this.insufficient_material() ||\n            this.in_threefold_repetition();\n    }\n\n    public get fen() {\n        return this.generate_fen();\n    }\n\n    public getPgn(options) {\n        /* using the specification from http://www.chessclub.com/help/PGN-spec\n                 * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\n                 */\n        const newline = (typeof options === 'object' &&\n            typeof options.newline_char === 'string') ?\n            options.newline_char : '\\n';\n        const max_width = (typeof options === 'object' &&\n            typeof options.max_width === 'number') ?\n            options.max_width : 0;\n        const result = [];\n        let header_exists = false;\n\n        /* add the PGN header headerrmation */\n        for (const i in this.header) {\n            /* TODO: order of enumerated properties in header object is not\n             * guaranteed, see ECMA-262 spec (section 12.6.4)\n             */\n            result.push('[' + i + ' \\\"' + this.header[i] + '\\\"]' + newline);\n            header_exists = true;\n        }\n\n        if (header_exists && history.length) {\n            result.push(newline);\n        }\n\n        /* pop all of history onto reversed_history */\n        const reversed_history = [];\n        while (history.length > 0) {\n            reversed_history.push(this.undo_move());\n        }\n\n        const moves = [];\n        let move_string = '';\n\n        /* build the list of moves.  a move_string looks like: \"3. e3 e6\" */\n        while (reversed_history.length > 0) {\n            const move = reversed_history.pop();\n\n            /* if the position started with black to move, start PGN with 1. ... */\n            if (!history.length && move.color === 'b') {\n                move_string = this.move_number + '. ...';\n            } else if (move.color === 'w') {\n                /* store the previous generated move_string if we have one */\n                if (move_string.length) {\n                    moves.push(move_string);\n                }\n                move_string = this.move_number + '.';\n            }\n\n            move_string = move_string + ' ' + this.move_to_san(move, false);\n            this.make_move(move);\n        }\n\n        /* are there any other leftover moves? */\n        if (move_string.length) {\n            moves.push(move_string);\n        }\n\n        /* is there a result? */\n        if (typeof this.header.Result !== 'undefined') {\n            moves.push(this.header.Result);\n        }\n\n        /* history should be back to what is was before we started generating PGN,\n         * so join together moves\n         */\n        if (max_width === 0) {\n            return result.join('') + moves.join(' ');\n        }\n\n        /* wrap the PGN output at max_width */\n        let current_width = 0;\n        for (let i2 = 0; i2 < moves.length; i2++) {\n            /* if the current move will push past max_width */\n            if (current_width + moves[i2].length > max_width && i2 !== 0) {\n\n                /* don't end the line with whitespace */\n                if (result[result.length - 1] === ' ') {\n                    result.pop();\n                }\n\n                result.push(newline);\n                current_width = 0;\n            } else if (i2 !== 0) {\n                result.push(' ');\n                current_width++;\n            }\n            result.push(moves[i2]);\n            current_width += moves[i2].length;\n        }\n\n        return result.join('');\n    }\n\n    public load_pgn(pgn, options) {\n        // allow the user to specify the sloppy move parser to work around over\n        // disambiguation bugs in Fritz and Chessbase\n        const sloppy = (typeof options !== 'undefined' && 'sloppy' in options) ?\n            options.sloppy : false;\n\n        function mask(str) {\n            return str.replace(/\\\\/g, '\\\\');\n        }\n\n        function has_keys(object) {\n            for (const key in object) {\n                return true;\n            }\n            return false;\n        }\n\n        function parse_pgn_header(header, hOptions) {\n            const hNewline_char = (typeof hOptions === 'object' &&\n                typeof hOptions.newline_char === 'string') ?\n                hOptions.newline_char : '\\r?\\n';\n            const header_obj = {};\n            const lHeaders = header.split(new RegExp(mask(hNewline_char)));\n            let key = '';\n            let value = '';\n\n            for (let i = 0; i < lHeaders.length; i++) {\n                key = lHeaders[i].replace(/^\\[([A-Z][A-Za-z]*)\\s.*\\]$/, '$1');\n                value = lHeaders[i].replace(/^\\[[A-Za-z]+\\s\"(.*)\"\\]$/, '$1');\n                if (this.trim(key).length > 0) {\n                    header_obj[key] = value;\n                }\n            }\n\n            return header_obj;\n        }\n\n        const newline_char = (typeof options === 'object' &&\n            typeof options.newline_char === 'string') ?\n            options.newline_char : '\\r?\\n';\n        const regex = new RegExp('^(\\\\[(.|' + mask(newline_char) + ')*\\\\])' +\n            '(' + mask(newline_char) + ')*' +\n            '1.(' + mask(newline_char) + '|.)*$', 'g');\n\n        /* get header part of the PGN file */\n        let header_string = pgn.replace(regex, '$1');\n\n        /* no info part given, begins with moves */\n        if (header_string[0] !== '[') {\n            header_string = '';\n        }\n\n        this.reset();\n\n        /* parse PGN header */\n        const headers = parse_pgn_header(header_string, options);\n        for (const key in headers) {\n            this.set_header([key, headers[key]]);\n        }\n\n        /* load the starting position indicated by [Setup '1'] and\n        * [FEN position] */\n        if (headers['SetUp'] === '1') {\n            if (!(('FEN' in headers) && this.load(headers['FEN']))) {\n                return false;\n            }\n        }\n\n        /* delete header to get the moves */\n        let ms = pgn.replace(header_string, '').replace(new RegExp(mask(newline_char), 'g'), ' ');\n\n        /* delete comments */\n        ms = ms.replace(/(\\{[^}]+\\})+?/g, '');\n\n        /* delete recursive annotation variations */\n        const rav_regex = /(\\([^\\(\\)]+\\))+?/g;\n        while (rav_regex.test(ms)) {\n            ms = ms.replace(rav_regex, '');\n        }\n\n        /* delete move numbers */\n        ms = ms.replace(/\\d+\\.(\\.\\.)?/g, '');\n\n        /* delete ... indicating black to move */\n        ms = ms.replace(/\\.\\.\\./g, '');\n\n        /* delete numeric annotation glyphs */\n        ms = ms.replace(/\\$\\d+/g, '');\n\n        /* trim and get array of moves */\n        let moves = this.trim(ms).split(new RegExp(/\\s+/));\n\n        /* delete empty entries */\n        moves = moves.join(',').replace(/,,+/g, ',').split(',');\n        let move = '';\n\n        for (let half_move = 0; half_move < moves.length - 1; half_move++) {\n            move = this.move_from_san(moves[half_move], sloppy);\n\n            /* move not possible! (don't clear the board to examine to show the\n             * latest valid position)\n             */\n            if (move === undefined) {\n                return false;\n            } else {\n                this.make_move(move);\n            }\n        }\n\n        /* examine last move */\n        move = moves[moves.length - 1];\n        if (this.POSSIBLE_RESULTS.indexOf(move) > -1) {\n            if (has_keys(this.header) && typeof this.header.Result === 'undefined') {\n                this.set_header(['Result', move]);\n            }\n        } else {\n            move = this.move_from_san(move, sloppy);\n            if (move === undefined) {\n                return false;\n            } else {\n                this.make_move(move);\n            }\n        }\n        return true;\n    }\n\n    public getHeader() {\n        return this.set_header(arguments);\n    }\n\n    public move(move: Move | string, options?) {\n        /* The move function can be called with in the following parameters:\n                 *\n                 * .move('Nxb7')      <- where 'move' is a case-sensitive SAN string\n                 *\n                 * .move({ from: 'h7', <- where the 'move' is a move object (additional\n                 *         to :'h8',      fields are ignored)\n                 *         promotion: 'q',\n                 *      })\n                 */\n\n        // allow the user to specify the sloppy move parser to work around over\n        // disambiguation bugs in Fritz and Chessbase\n        const sloppy = (typeof options !== 'undefined' && 'sloppy' in options) ?\n            options.sloppy : false;\n\n        let move_obj;\n\n        if (typeof move === 'string') {\n            move_obj = this.move_from_san(move, sloppy);\n        } else if (typeof move === 'object') {\n            const moves = this.generate_moves();\n\n            /* convert the pretty move object to an ugly move object */\n            for (let i = 0, len = moves.length; i < len; i++) {\n                if (move.from === this.algebraic(moves[i].from) &&\n                    move.to === this.algebraic(moves[i].to) &&\n                    (!('promotion' in moves[i]) ||\n                        move.promotion === moves[i].promotion)) {\n                    move_obj = moves[i];\n                    break;\n                }\n            }\n        }\n\n        /* failed to find move */\n        if (!move_obj) {\n            return undefined;\n        }\n\n        /* need to make a copy of move because we can't generate SAN after the\n         * move is made\n         */\n        const pretty_move = this.make_pretty(move_obj);\n\n        this.make_move(move_obj);\n        this.onChange.emit();\n        return pretty_move;\n    }\n\n    public undo() {\n        const move = this.undo_move();\n        this.onChange.emit();\n        return (move) ? this.make_pretty(move) : undefined;\n    }\n\n    public square_color(square) {\n        if (square in this.SQUARES) {\n            const sq_0x88 = this.SQUARES[square];\n            return ((this.rank(sq_0x88) + this.file(sq_0x88)) % 2 === 0) ? 'light' : 'dark';\n        }\n\n        return undefined;\n    }\n\n    public getHistory(options) {\n        const reversed_history = [];\n        const move_history = [];\n        const verbose = (typeof options !== 'undefined' && 'verbose' in options &&\n            options.verbose);\n\n        while (history.length > 0) {\n            reversed_history.push(this.undo_move());\n        }\n\n        while (reversed_history.length > 0) {\n            const move = reversed_history.pop();\n            if (verbose) {\n                move_history.push(this.make_pretty(move));\n            } else {\n                move_history.push(this.move_to_san(move));\n            }\n            this.make_move(move);\n        }\n\n        return move_history;\n    }\n\n} // End of Chess class\n\nexport class FenValidationResult {\n    // { valid: true, error_number: 0, error: errors[0] };\n    valid: boolean;\n    error_number: number;\n    error: string;\n}\n\nexport class ChessPiece {\n    color;\n    type;\n}\n\n// enum Colour {\n//     WHITE = 'w',\n//     BLACK = 'b'\n// }\n\nclass Castling {\n    w: any;\n    b: any;\n}\n\n\n\n\n","/*\n * Public API Surface of chess-ts\n */\n\nexport * from './lib/chess';\nexport * from './lib/chess-enums';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":";;AACA;;;;;;;;;IAUY;AAAZ,WAAY,MAAM;IACd,qBAAW,CAAA;IACX,qBAAW,CAAA;AACf,CAAC,EAHW,MAAM,KAAN,MAAM,QAGjB;IAEW;AAAZ,WAAY,SAAS;IACjB,uBAAU,CAAA;IACV,yBAAY,CAAA;IACZ,yBAAY,CAAA;IACZ,uBAAU,CAAA;IACV,wBAAW,CAAA;IACX,uBAAU,CAAA;AACd,CAAC,EAPW,SAAS,KAAT,SAAS,QAOpB;MAEY,IAAI;IACb,YAAmB,IAAY,EAAS,EAAU,EACvC,SAAkB;QADV,SAAI,GAAJ,IAAI,CAAQ;QAAS,OAAE,GAAF,EAAE,CAAQ;QACvC,cAAS,GAAT,SAAS,CAAS;KAAI;;;MCxBxB,KAAK;IAwHd,YAAY,GAAY;QAtHjB,UAAK,GAAG,CAAC,CAAC,CAAC;QACX,aAAQ,GAAuB,IAAI,YAAY,EAAQ,CAAC;QAG/D,YAAO,GAAG,cAAc,CAAC;QAEzB,qBAAgB,GAAG,0DAA0D,CAAC;QAE9E,qBAAgB,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC;QAElD,iBAAY,GAAG;YACX,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;YACnB,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC;SAC1B,CAAC;QAEF,kBAAa,GAAG;YACZ,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;YACvC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;YACrB,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;YACnB,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;YACrC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;SACxC,CAAC;QAEF,YAAO,GAAG;YACN,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;YACjD,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC;YACjD,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YACjD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YACjD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YACjD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YACjD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YACjD,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;YAC5D,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YACjD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YACjD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YACjD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YACjD,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YACjD,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC;YACjD,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE;SACjD,CAAC;QAEF,SAAI,GAAG;YACH,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;YACjD,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC;YACjD,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YACjD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YACjD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YACjD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YACjD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YACjD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;YACrD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YACpD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YACpD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YACpD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YACpD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YACpD,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,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"}